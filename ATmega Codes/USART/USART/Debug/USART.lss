
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000130  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000042a  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000156  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f9  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec eb       	ldi	r30, 0xBC	; 188
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 30       	cpi	r26, 0x01	; 1
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	17 d0       	rcall	.+46     	; 0x96 <main>
  68:	27 c0       	rjmp	.+78     	; 0xb8 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <ini>:
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)         

volatile unsigned char val;
ini()
{
	UBRR0H=UBRRH_VALUE;
  6c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=UBRRL_VALUE;
  70:	87 e6       	ldi	r24, 0x67	; 103
  72:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B|=1<<TXEN0|1<<RXEN0;
  76:	e1 ec       	ldi	r30, 0xC1	; 193
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	88 61       	ori	r24, 0x18	; 24
  7e:	80 83       	st	Z, r24
	UCSR0C|=1<<UCSZ00|1<<USBS0;
  80:	e2 ec       	ldi	r30, 0xC2	; 194
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8a 60       	ori	r24, 0x0A	; 10
  88:	80 83       	st	Z, r24
}	
  8a:	08 95       	ret

0000008c <Send_data>:

Send_data(uint8_t val)
{
	while(UCSR0A & (1<<UDRE0)==0);
  8c:	90 91 c0 00 	lds	r25, 0x00C0
	UDR0=val;
  90:	80 93 c6 00 	sts	0x00C6, r24
}
  94:	08 95       	ret

00000096 <main>:
int main(void)
{
	ini();
  96:	ea df       	rcall	.-44     	; 0x6c <ini>
	val='A';
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	80 93 00 01 	sts	0x0100, r24
	while (1)
	{
		Send_data(val);
  9e:	80 91 00 01 	lds	r24, 0x0100
  a2:	f4 df       	rcall	.-24     	; 0x8c <Send_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	93 ed       	ldi	r25, 0xD3	; 211
  a8:	a0 e3       	ldi	r26, 0x30	; 48
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	a0 40       	sbci	r26, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x14>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x1e>
  b4:	00 00       	nop
  b6:	f3 cf       	rjmp	.-26     	; 0x9e <main+0x8>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
